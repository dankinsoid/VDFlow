import Foundation

/// A protocol that defines a collection of navigational steps.
///
/// Types conforming to this protocol represent a navigation flow with selectable steps.
/// The protocol provides methods for selecting and checking which step is currently selected.
///
/// ```swift
/// @Steps
/// struct AuthSteps: StepsCollection {
///     var login
///     var register
///     var forgotPassword
/// }
///
/// var steps = AuthSteps.login
/// steps.selected = .register  // Navigate to register screen
/// ```
public protocol StepsCollection {

	/// The type representing all possible steps in the collection.
	///
	/// This type is typically an enum generated by the `@Steps` macro.
	associatedtype AllSteps: Hashable & Codable & Sendable
	/// The currently selected step in the collection.
	///
	/// Setting this property navigates to the selected step.
	var selected: AllSteps { get set }
	/// The ID of the last mutation made to this collection.
	///
	/// This property is used internally for tracking changes to the navigation state.
	var _lastMutateID: MutateID? { get }
}

extension StepsCollection {

    /// Checks if a specific step is currently selected.
    ///
    /// - Parameter step: The key path to the step to check.
    /// - Returns: `true` if the specified step is selected, `false` otherwise.
    ///
    /// ```swift
    /// if steps.isSelected(\.login) {
    ///     // We're on the login screen
    /// }
    /// ```
    public func isSelected<T>(_ step: WritableKeyPath<Self, StepID<T>>) -> Bool {
        selected == self[keyPath: step].id
    }

    /// Selects a specific step in the collection.
    ///
    /// - Parameter step: The key path to the step to select.
    ///
    /// ```swift
    /// steps.select(\.register)  // Navigate to the register screen
    /// ```
    public mutating func select<T>(_ step: WritableKeyPath<Self, StepID<T>>) {
        self[keyPath: step].select()
    }

    /// Selects a specific step in the collection and sets its associated value.
    ///
    /// - Parameters:
    ///   - step: The key path to the step to select.
    ///   - value: The value to associate with the selected step.
    ///
    /// ```swift
    /// steps.select(\.profile, with: UserProfile(id: "123"))
    /// ```
    public mutating func select<T>(_ step: WritableKeyPath<Self, StepID<T>>, with value: T) {
        self[keyPath: step].select(with: value)
    }
}
